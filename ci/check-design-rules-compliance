#!/usr/bin/env bash

# prototype-kicad-project-ci-cd
#
# Copyright 2021, Andrew Countryman <apcountryman@gmail.com> and the
# prototype-kicad-project-ci-cd contributors
#
# You may redistribute and modify this documentation and make products using it under the
# terms of the CERN-OHL-P v2 (https:/cern.ch/cern-ohl). This documentation is distributed
# WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY
# QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-P v2 for
# applicable conditions.

# File: ci/check-design-rules-compliance
# Description: prototype-kicad-project-ci-cd repository CI design rules compliance check
#       script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Check if project layout(s) comply with the project's design"
    echo "        rules."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic [--ignore-unconnected-nets]"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --ignore-unconnected-nets"
    echo "        Ignore unconnected nets in the design rules check."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --ignore-unconnected-nets"
    echo "    $mnemonic"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function check_design_rules_compliance()
{
    local layouts; mapfile -t layouts < <( git -C "$repository" ls-files '*.kicad_pcb' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly layouts

    for layout in "${layouts[@]}"; do
        if ! "$repository/utilities/KiAuto/src/pcbnew_do" run_drc "$ignore_unconnected_nets" "$layout" "$repository"; then
            cat "$repository/"*.rpt
            abort
        fi
    done
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    local ignore_unconnected_nets=""

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --ignore-unconnected-nets)
                ignore_unconnected_nets="--ignore_unconnected"
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done
    
    readonly ignore_unconnected_nets

    check_design_rules_compliance
}

main "$@"
