#!/usr/bin/env bash

# prototype-kicad-project-ci-cd
#
# Copyright 2021, Andrew Countryman <apcountryman@gmail.com> and the
# prototype-kicad-project-ci-cd contributors
#
# You may redistribute and modify this documentation and make products using it under the
# terms of the CERN-OHL-P v2 (https:/cern.ch/cern-ohl). This documentation is distributed
# WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY
# QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-P v2 for
# applicable conditions.

# File: ci/generate-traditional-bom
# Description: prototype-kicad-project-ci-cd repository CI traditional BOM generation
#       script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Generate traditional BOM for the project."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function generate_traditional_bom()
{
    local projects; mapfile -t projects < <( git -C "$repository" ls-files '*.pro' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly projects

    if [[ "${#projects[@]}" -gt 1 ]]; then
        abort "multiple projects found: ${projects[*]}"
    fi

    if [[ "${#projects[@]}" -eq 1 ]]; then
        local -r project="${projects[0]}"
        local -r project_name=$( basename "$project" )
        local -r schematic="$project_name.sch"

        if ! git -C "$repository" ls-files --error-unmatch "$schematic"; then
            # KiAuto documentation refers to the following file as "the project's XML
            # BoM", but it will be used as KiBoM's "netlist" positional argument
            local -r netlist="$repository/$project_name.xml"

            if ! "$repository/utilities/KiAuto/src/eeschema_do" bom_xml "$schematic" "$repository/temp"; then
                abort
            fi

            local -r formats=( "csv" "html" "xml" "xslx" )

            for format in "${formats[@]}"; do
                if ! "$repository/utilities/KiBoM/KiBOM_CLI.py" -d "$repository/traditional-bom" "$netlist" "$project_name.$format"; then
                    abort
                fi
            done
        fi
    fi
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    generate_traditional_bom
}

main "$@"
