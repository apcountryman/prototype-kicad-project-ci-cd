#!/usr/bin/env bash

# prototype-kicad-project-ci-cd
#
# Copyright 2021, Andrew Countryman <apcountryman@gmail.com> and the
# prototype-kicad-project-ci-cd contributors
#
# You may redistribute and modify this documentation and make products using it under the
# terms of the CERN-OHL-P v2 (https:/cern.ch/cern-ohl). This documentation is distributed
# WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY
# QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-P v2 for
# applicable conditions.

# File: git/config/install
# Description: Git config entries install script for the prototype-kicad-project-ci-cd
#       repository.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Install the prototype-kicad-project-ci-cd repository's Git"
    echo "        config entries."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function install_kicad_project_filter_entries()
{
    if ! git -C "$repository" config --local filter.kicad_project.clean "sed -E -e 's/^update=.*$/update=/' -e 's/^last_client=.*$/last_client=/'" > "/dev/null"; then
        abort "KiCad project filter clean command installation failure"
    fi

    if ! git -C "$repository" config --local filter.kicad_project.smudge "cat" > "/dev/null"; then
        abort "KiCad project filter smudge command installation failure"
    fi
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r config=$( dirname "$script" )
    local -r repository=$( readlink -f "$config/../.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    install_kicad_project_filter_entries
}

main "$@"
