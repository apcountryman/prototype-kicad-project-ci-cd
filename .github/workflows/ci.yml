# prototype-kicad-project-ci-cd
#
# Copyright 2021, Andrew Countryman <apcountryman@gmail.com> and the
# prototype-kicad-project-ci-cd contributors
#
# You may redistribute and modify this documentation and make products using it under the
# terms of the CERN-OHL-P v2 (https:/cern.ch/cern-ohl). This documentation is distributed
# WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY
# QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-P v2 for
# applicable conditions.

# File: .github/workflows/ci.yml
# Description: GitHub Actions CI workflow for the prototype-kicad-project-ci-cd
#       repository.

name: CI

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    analyze-static-shellcheck:
        name: Analyze (static) - shellcheck
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
            - name: Analyze
              shell: bash
              run: ./ci/analyze --analyzer shellcheck

    scrub-kicad-project-files:
        name: Scrub KiCad project files
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
            - name: Scrub KiCad project files
              shell: bash
              run: ./ci/scrub-kicad-project-files

    check-klc-compliance-footprints:
        name: Check KLC compliance - footprints
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Check KLC compliance
              shell: bash
              run: ./ci/check-klc-compliance --check-footprints

    check-klc-compliance-symbols:
        name: Check KLC compliance - symbols
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Check KLC compliance
              shell: bash
              run: ./ci/check-klc-compliance --check-symbols

    check-design-rules-compliance:
        name: Check design rules compliance
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Check design rules compliance
              shell: bash
              run: ./ci/check-design-rules-compliance --ignore-unconnected-nets

    check-electrical-rules-compliance:
        name: Check electrical rules compliance
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Check electrical rules compliance
              shell: bash
              run: ./ci/check-electrical-rules-compliance

    generate-schematic-pdfs:
        name: Generate schematic PDF(s)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Generate schematic PDF(s)
              shell: bash
              run: ./ci/generate-schematic-pdfs
            - name: Archive generated schematic PDF(s)
              uses: actions/upload-artifact@v2
              with:
                  name: schematic-pdfs
                  path: schematic-pdfs
                  retention-days: 7

    generate-traditional-boms:
        name: Generate traditional BOM(s)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Generate traditional BOM(s)
              shell: bash
              run: ./ci/generate-traditional-boms
            - name: Archive generated traditional BOM(s)
              uses: actions/upload-artifact@v2
              with:
                  name: traditional-boms
                  path: traditional-boms
                  retention-days: 7

    generate-interactive-boms:
        name: Generate interactive BOM(s)
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Generate interactive BOM(s)
              shell: bash
              run: ./ci/generate-interactive-boms
            - name: Archive generated interactive BOM(s)
              uses: actions/upload-artifact@v2
              with:
                  name: interactive-boms
                  path: interactive-boms
                  retention-days: 7

    generate-production-files:
        name: Generate production files
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: recursive
            - name: Generate production files
              shell: bash
              run: ./ci/generate-production-files
            - name: Archive generated production files
              uses: actions/upload-artifact@v2
              with:
                  name: production-files
                  path: production-files
                  retention-days: 7
